package arg;

public class AVLTree<K extends Comparable<K>, V> extends BinarySearchTreeST<K, V> {

	protected class AVLNode extends Node {
		int height;

		public AVLNode(K key, V value) {
			super(key, value);
			this.left = this.right = null;
			this.height = 0;
		}
	}

	@Override
	public void put(K key, V value) {
		root = put(root, key, value);

	}

	private Node put(Node r, K key, V value) {
		if (r == null)
			return new AVLNode(key, value);

		int cmp = key.compareTo(r.key);

		if (cmp < 0)
			r.left = put(r.left, key, value);

		else if (cmp > 0)
			r.right = put(r.right, key, value);
		else
			r.value = value;

		r = balance(r);
		setHeight(r);
		return r;
	}

	public void delete(K key) {
		root = delete(root, key);

	}

	private Node delete(Node r, K key) {
		if (r == null)
			return null;

		int cmp = key.compareTo(r.key);

		if (cmp < 0)
			r.left = delete(r.left, key);

		else if (cmp > 0)
			r.right = delete(r.right, key);

		else {
			if (r.left == null)
				return r.right;
			if (r.right == null)
				return r.left;

			Node t = r;
			r = min(r.right);
			r.right = deleteMin(t.right);
			r.left = t.left;
		}
		r = balance(r);
		setHeight(r);
		return r;

	}

	private Node balance(Node r) {
		if (getBalancingFactor(r) == 2) {

			if (getHeight(r.left.left) - getHeight(r.left.right) < 0)
				r.left = rotateLeft(r.left);
			r = rotateRight(r);

		} else if (getBalancingFactor(r) == -2) {

			if (getHeight(r.right.left) - getHeight(r.right.right) > 0)
				r.right = rotateRight(r.right);
			r = rotateLeft(r);

		}
		return r;
	}

	private Node rotateLeft(Node r) {
		Node x = r.right;
		r.right = x.left;
		x.left = r;
		setHeight(r);
		setHeight(x);
		return x;
	}

	private Node rotateRight(Node r) {
		Node x = r.left;
		r.left = x.right;
		x.right = r;
		setHeight(r);
		setHeight(x);
		return x;
	}

	public int getBalancingFactor(Node r) {

		return getHeight(r.left) - getHeight(r.right);

	}

	@SuppressWarnings("unchecked")
	private int getHeight(Node r) {
		if (r != null) {
			AVLNode avl = (AVLNode) r;
			return avl.height;
		} else
			return -1;
	}

	@SuppressWarnings("unchecked")
	private void setHeight(Node r) {
		AVLNode avl = (AVLNode) r;
		avl.height = max(getHeight(r.left), getHeight(r.right)) + 1;

	}

	private int max(int hLeft, int hRight) {

		return (hLeft > hRight) ? hLeft : hRight;

	}

	public int teste(K key) {
		return key.compareTo(null);
	}

	public static void main(String[] args) {
		AVLTree<Integer, Integer> avl = new AVLTree<Integer, Integer>();
		avl.put(4, 2);
		avl.put(7, 2);

		avl.put(3, 2);
		avl.put(1, 2);
		avl.put(15, 10);
		avl.put(25, 10);
		avl.put(13, 10);
		avl.put(17, 10);
		avl.put(23, 10);
		avl.put(30, 10);
		avl.put(18, 10);
		// System.out.println(avl.toString());
		 avl.print();
//		 avl.drawBST();
		// avl.delete(7);
		// avl.drawBST();
		// avl.delete(13);
		// avl.drawBST();
//		avl.printString();

	}

}
