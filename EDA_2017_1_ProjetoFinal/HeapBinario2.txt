package arg;

import java.util.LinkedList;

public class HeapBinario {

	private LinkedList<Integer> heap;

	public HeapBinario() {
		this.heap = new LinkedList<>();
	}

	public void insert(Integer x) {
		heap.add(x);
		swimUp(heap.size() - 1);

	}

	private void swimUp(int m) {
		int f = m;

		f = getPai(f);

		while (m >= 1 && heap.get(f) > heap.get(m)) {

			int aux = heap.get(f);
			heap.set(f, heap.get(m));
			heap.set(m, aux);

			m = f;

			f = getPai(f);

		}

	}

	private int getPai(int f) {
		if (f % 2 == 1)
			f /= 2;
		else
			f = (f - 1) / 2;
		return f;
	}

	public Integer extractMin() {
		int x = heap.get(0);
		heap.set(0, heap.get(heap.size() - 1));
		heap.remove(heap.size() - 1);
		sinkDown(0);
		return x;
	}

	public Integer Min() {
		return heap.get(0);
	}

	private void sinkDown(int m) {
		int i = m;

		while (2 * i + 1 < heap.size() - 1) {

			int min1 = heap.get(2 * i + 1);
			int min2 = heap.get(2 * i + 2);

			if (min1 < min2) {

				heap.set(2 * i + 1, heap.get(i));
				heap.set(i, min1);
				i = i * 2 + 1;

			} else {
				heap.set(2 * i + 2, heap.get(i));
				heap.set(i, min2);
				i = i * 2 + 2;

			}

		}

	}

	public void decreasekey(int i, Integer key) {
		if (heap.get(i - 1) > key) {
			heap.set(i - 1, key);

			swimUp(i - 1);
		} else {
			heap.set(i - 1, key);
			sinkDown(i - 1);
		}

	}

	public boolean isEmpty() {
		return heap.size() == 0;
	}

	public void delete(Integer i) {
		heap.set(i, heap.get(heap.size() - 1));
		heap.remove(heap.size() - 1);

		int m = i;

		if (i % 2 == 1)
			m++;

		if (heap.get(i) < heap.get(m / 2))
			swimUp(i);

		else
			sinkDown(i);

	}

	public void meld(HeapBinario h2) {

		for (int i = 0; i < h2.heap.size(); i++)
			insert(h2.heap.get(i));
	}

	public LinkedList<Integer> getHeap() {
		return heap;
	}

	public void printer(HeapBinario heap) {
		for (Integer x : heap.getHeap())
			System.out.println(x);
	}

	public static void main(String[] args) {
		HeapBinario h = new HeapBinario();

		h.insert(12);
		h.insert(9);
		h.insert(7);
		h.insert(22);
		h.insert(3);
		h.insert(26);
		h.insert(14);

		h.insert(0);

		System.out.println(h.isEmpty());
		System.out.println("insere Heap");
		h.printer(h);
		System.out.println();
		System.out.println();
		System.out.println("Extrair mÃ½nimo");
		h.extractMin();
		h.printer(h);
		System.out.println();
		System.out.println();
		System.out.println("delete index");
		h.delete(2);
		h.printer(h);
	}
}
